;;;; Created on 2009-12-10 21:08:46
(in-package :projecto1)

(defun valor-coordenada (x y tabuleiro)
(let ((a (1- x)) (b (- 7 y)))
(if (or (< a 0) (< b 0))
nil
(nth a (nth b tabuleiro))
) 
)
)

(defun substituir-nth (lista n elem)
  (cond
    ((null lista) nil)
    ((= n 1) (cons elem (cdr lista)))
    (T (cons (car lista) (substituir-nth (cdr lista) (1- n) elem)))))

(defun mudar-coordenada (x y valor tabuleiro)
(substituir-nth tabuleiro (- 8 y) (substituir-nth (nth (- 7 y) tabuleiro) x valor))
)

(defun conta1s (L)
  (cond ((null L) 0)
   ((numberp L) (if (= L 1) 1 0))
   (T (apply '+ (mapcar 'conta1s L)))))



(defun c-mover (x y tabuleiro)
 (mudar-coordenada x (1+ y) 1 (mudar-coordenada x y 0 tabuleiro))
)

(defun b-mover (x y tabuleiro)
 (mudar-coordenada x (1- y) 1 (mudar-coordenada x y 0 tabuleiro))
)

(defun e-mover (x y tabuleiro)
 (mudar-coordenada (1- x) y 1 (mudar-coordenada x y 0 tabuleiro))
)

(defun d-mover (x y tabuleiro)
 (mudar-coordenada (1+ x) y 1 (mudar-coordenada x y 0 tabuleiro))
)

(defun cc-mover (x y tabuleiro)
 (mudar-coordenada x (+ y 2) 1 (mudar-coordenada x (1+ y) 0 (mudar-coordenada x y 0 tabuleiro)))
)

(defun cb-mover (x y tabuleiro)
 (mudar-coordenada x (- y 2) 1 (mudar-coordenada x (1- y) 0 (mudar-coordenada x y 0 tabuleiro)))
)

(defun ce-mover (x y tabuleiro)
 (mudar-coordenada (- x 2) y 1 (mudar-coordenada (1- x) y 0 (mudar-coordenada x y 0 tabuleiro)))
)

(defun cd-mover (x y tabuleiro)
 (mudar-coordenada (+ 2 x) y 1 (mudar-coordenada (1+ x) y 0 (mudar-coordenada x y 0 tabuleiro)))
)



(defun c (x y tabuleiro)
(cond
  ((and (equal (valor-coordenada x y tabuleiro) 1)(equal (valor-coordenada x (1+ y) tabuleiro) 0)) (c-mover x y tabuleiro))
  (T nil)
  )
)

(defun b (x y tabuleiro)
(cond
  ((and (equal (valor-coordenada x y tabuleiro) 1)(equal (valor-coordenada x (1- y) tabuleiro) 0)) (b-mover x y tabuleiro))
  (T nil)
  )
)

(defun e (x y tabuleiro)
(cond
  ((and (equal (valor-coordenada x y tabuleiro) 1)(equal (valor-coordenada (1- x) y tabuleiro) 0)) 
   (e-mover x y tabuleiro)
   )
  (T nil)
  )
)

(defun d (x y tabuleiro)
(cond
  ((and (equal (valor-coordenada x y tabuleiro) 1)(equal (valor-coordenada (1+ x) y tabuleiro) 0)) 
  (d-mover x y tabuleiro)
   )
  (T nil)
  )
)

(defun cc (x y tabuleiro)
(cond
  ((and (equal (valor-coordenada x y tabuleiro) 1)(equal (valor-coordenada x (1+ y) tabuleiro) 1)(equal (valor-coordenada x (+ y 2) tabuleiro) 0)) (cc-mover x y tabuleiro))
  (T nil)
)
)

(defun cb (x y tabuleiro)
(cond
  ((and (equal (valor-coordenada x y tabuleiro) 1)(equal (valor-coordenada x (1- y) tabuleiro) 1)(equal (valor-coordenada x (- y 2) tabuleiro) 0)) (cb-mover x y tabuleiro))
  (T nil)
)
)

(defun ce (x y tabuleiro)
(cond
  ((and (equal (valor-coordenada x y tabuleiro) 1)(equal (valor-coordenada (1- x) y tabuleiro) 1)(equal (valor-coordenada (- x 2) y tabuleiro) 0)) (ce-mover x y tabuleiro))
  (T nil)
)
)

(defun cd (x y tabuleiro)
(cond
  ((and (equal (valor-coordenada x y tabuleiro) 1)(equal (valor-coordenada (1+ x) y tabuleiro) 1)(equal (valor-coordenada (+ x 2) y tabuleiro) 0)) (cd-mover x y tabuleiro))
  (T nil)
)
)

(defun objectivo (tabuleiro)
  (if (= (conta1s tabuleiro) 1) t nil)
)
