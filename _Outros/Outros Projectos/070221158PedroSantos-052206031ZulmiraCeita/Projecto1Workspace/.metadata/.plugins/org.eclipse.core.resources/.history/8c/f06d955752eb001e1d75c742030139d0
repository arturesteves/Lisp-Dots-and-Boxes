(in-package :projecto1)


;menu que inicia o jogo

(defun menuPrincipal ()
  (progn
    (format t "лллллллллллллллллллллллллллл")(terpri)
    (format t "                           л")(terpri)
    (format t "      PUZZLE SOLIT┴RIO     л")(terpri)
    (format t "                           л")(terpri)
    (format t "   1- Escolher Tabuleiro   л")(terpri)
    (format t "                           л")(terpri)
    (format t "   0- Sair                 л")(terpri)
    (format t "                           л")(terpri)
    (format t "лллллллллллллллллллллллллллл")(terpri)
    (format t "                            ")(terpri)
    (format t "Escolha uma opчуo: ")
  )
  (let ((op(read)))
    (cond
      ((= op 1) (menuTabuleiro)) ;menuTabuleiro vai servir para escolher os tabuleiros
      ((= op 0)(format t "Saiu da сrea de Jogo"))
      (T(progn
          (format t "Opчуo Invсlida!")(terpri)
          (menuPrincipal)
        )
      )
    )
  )
)


(defun menuAlgoritmo(tabuleiro)
  (progn
    (format t "ллллллллллллллллллллллллллл")(terpri)
    (format t "                          л")(terpri)
    (format t "      ALGORITMOS          л")(terpri)
    (format t "                          л")(terpri)
    (format t "    1 - Breath-First      л")(terpri)
    (format t "    2 - Depth-First       л")(terpri)
    (format t "    3 - A*                л")(terpri)
    (format t "    4 - IDA*              л")(terpri)
    (format t "                          л")(terpri)
    (format t "    0 - Voltar            л")(terpri)
    (format t "ллллллллллллллллллллллллллл")(terpri)
    (format t "Escolha um algoritmo: ")
    )
  (let((op (read)))
    (cond
      ((= op 1)(progn(time(procura-generica(cria-estado tabuleiro)                                
                                            nil 
                                            'largura 
                                            '(c b e d cc cb ce cd) 
                                            'semheuristica
                           )
                      )  
                      
                 ) 
       )
      ((= op 2)(progn(time(procura-generica(cria-estado tabuleiro)                                
                                            nil 
                                            'largura 
                                            '(c b e d cc cb ce cd) 
                                            'semheuristica
                           )
                      )
                           
                        
                 ) 
       )
      ((= op 3)(menuHeuristica tabuleiro 'a-star))
      ((> op 4)(menuHeuristica tabuleiro 'ida-star))
      ((= op 0)(menuTabuleiro)) 
      (T(progn
          (format t "Escolha um tabuleiro vсlido!")
          (menuTabuleiro)
          )
        )
      
      
      ) 
    )
  )

;________________________________________________________________________

;menu para escolher a heurэstica

(defun menuHeuristica (tabuleiro algoritmo)
  (progn
    (format t "ллллллллллллллллллллллллллллллллллллллл")(terpri)
    (format t "                                      л")(terpri)
    (format t "      HEUR═STICAS                     л")(terpri)
    (format t "                                      л")(terpri)
    (format t "    1 - N║ de peчas no tabuleiro      л")(terpri)
    (format t "    2 - ..........                    л")(terpri)
    (format t "                                      л")(terpri)
    (format t "ллллллллллллллллллллллллллллллллллллллл")(terpri)
    (format t "                                       ")(terpri)
    (format t "Escolha uma heurэstica: ")
    )
  (let
    ((op (read)))
    (cond
      ((= op 1)(progn(time(procura-generica(cria-estado tabuleiro)                                
                                            nil 
                                            'largura 
                                            '(c b e d cc cb ce cd) 
                                            'semheuristica
                                            )
                           )  
                       
                      )
                     
                )
      )
    )			
)


;____________________________________________________________________________________________________________________
;(le_problemas "D:/PEDRO/Development/Eclipse/projecto1/Problemas.dat")
(defun le_problemas (caminho)
(with-open-file (f caminho
:direction :input
:if-exists NIL
:if-does-not-exist :error)
(read f)
)
)



;funчуo para criar o estado do tabuleiro inicialmente
(defun cria-estado (tabuleiro &optional (heuristica 'semheuristica))
  (list(make-estado :tabuleiro (nth tabuleiro (le_problemas "C://Problemas.dat"))
                                                              :f (funcall heuristica tabuleiro)
                                                              :g 0
                                                              :h (funcall heuristica tabuleiro) 
                                                              :movactual NIL 
                                                              :nopai nil)
   )
  
)


(defun converteLetras (letra)
  (- (char-code letra) 97)
)

