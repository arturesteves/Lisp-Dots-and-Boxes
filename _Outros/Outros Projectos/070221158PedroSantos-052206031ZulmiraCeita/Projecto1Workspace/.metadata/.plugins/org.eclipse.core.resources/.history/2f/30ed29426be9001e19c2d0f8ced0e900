;;;; Created on 2009-12-10 21:11:05
(in-package :projecto1)

(defstruct estado
tabuleiro
f
g
h
movActual
noPai  
)


(defun semheuristica (tabuleiro)
  0
)


(defun heuristica1 (tabuleiro)
  (1- (conta1s tabuleiro))
)
;;<TENTATIVA DE HEURISTICA 2>
(defun heuristica2-aux (tabuleiro x y soma)
(cond
((> x 7) soma)
((> y 7) (heuristica2-aux tabuleiro (1+ x) y soma))
(T
(+ soma (soma-vizinhanca tabuleiro x y))
)
)
)

(defun heuristica2 (tabuleiro)
  (float (/ (heuristica2-aux tabuleiro 1 1 0) (conta1s tabuleiro)))
)

(defun soma-vizinhanca (tabuleiro x y)
(-
(remove-nil (valor-coordenada (1+ x) y tabuleiro))
(remove-nil (valor-coordenada (1- x) y tabuleiro))
(remove-nil (valor-coordenada x (1+ y) tabuleiro))
(remove-nil (valor-coordenada x (1- y) tabuleiro))
)
)

(defun remove-nil (n)
(if (null n) 0 n)
)

;;</TENTATIVA DE HEUSTICA 2>

(defun nos-gerados (la lf)
   (+ (length la) (length lf))
)

(defun nos-expandidos (lf)
   (length lf)
)

(defun penetrancia (la lf no)
   (float (/ (profundidade-solucao no) (nos-gerados la lf)))
)

(defun profundidade-solucao (no)
   (estado-g no)
)

(defun factor-ramificacao-medio (la lf no)
  (float (/ (nos-gerados la lf) (profundidade-solucao no)))
)



#|(defun sucessores-aux (no operador gerados x y heuristica)
  (cond
    ((> x 7) gerados)
    ((> y 7) (sucessores-aux no operador gerados (1+ x) 1 heuristica))
    (T
     (let ((tabGerado (funcall operador x y (estado-tabuleiro no))))
       (if (null tabGerado) 
           (sucessores-aux no operador gerados x (1+ y) heuristica)
           (sucessores-aux no operador (cons (make-estado 
                                              :tabuleiro tabGerado
                                              :f (+ (1+ (estado-g no)) (funcall heuristica tabGerado))
                                              :g (1+ (estado-g no))
                                              :h (funcall heuristica tabGerado)
                                              :movActual (list operador x y)
                                              :noPai no
                                              ) 
                                             gerados) x (1+ y) heuristica)
           )
       )
     )
    )   
  )



(defun sucessores (no operadores gerados heuristica)
 (cond
   ((null operadores) gerados)
   (T (sucessores no (cdr operadores) (sucessores-aux no (car operadores) gerados 1 1 heuristica) heuristica))
  )
)
|#

(defun sucessores-aux (no operador gerados x y heuristica)
  (cond
    ((> x 7) gerados)
    ((> y 7) (sucessores-aux no operador gerados (1+ x) 1 heuristica))
    (T
     (let ((tabGerado (funcall operador x y (estado-tabuleiro no))))
       (if (null tabGerado) 
           (sucessores-aux no operador gerados x (1+ y) heuristica)
           (sucessores-aux no operador (cons (make-estado 
                                              :tabuleiro tabGerado
                                              :f (+ (1+ (estado-g no)) (funcall heuristica tabGerado))
                                              :g (1+ (estado-g no))
                                              :h (funcall heuristica tabGerado)
                                              :movActual (list operador x y)
                                              :noPai no
                                              ) 
                                             gerados) x (1+ y) heuristica)
           )
       )
     )
    )   
  )



(defun sucessores (no operadores gerados heuristica)
 (cond
   ((null operadores) gerados)
   (T (sucessores no (cdr operadores) (sucessores-aux no (car operadores) gerados 1 1 heuristica) heuristica))
  )
)


#|(defun procura-generica (la lf algoritmo operadores heuristica)
(cond
((null la) nil)  
((objectivo (estado-tabuleiro (first la))) (devolver (car la) la lf))
((visitado (car la) lf)(procura-generica (cdr la) lf algoritmo operadores heuristica))
(T (procura-generica
    (funcall algoritmo (sucessores (car la) operadores nil heuristica) (cdr la)) (cons (car la) lf) algoritmo operadores heuristica
    )                    
    )
)
)  
|#

#|(defun minimo-sucessores (velhoMinimo novoMinimo lista)
(cond 
((null lista) novoMinimo)
(T (if
(and (< (estado-f (car lista)) novoMinimo) (> (estado-f (car lista)) velhoMinimo))
(minimo-sucessores velhoMinimo (estado-f (car lista)) (cdr lista))
(minimo-sucessores velhoMinimo novoMinimo (cdr lista))
)
)
)
)

(defun ida-star (sucessores restla limiar) ;passar também a lista de fechados
  (cond ((null sucessores)restla)
        ((<= (estado-f (car sucessores)) limiar) (append sucessores restla))
        (t restla)
  )
)


(defun procura-generica (la lf algoritmo operadores heuristica limiar)
(cond
((null la)
	(cond 
	((equal algoritmo 'ida-star) 
	(let ((novolimiar(minimo-sucessores limiar 99999 (append lf la))))
		(if (= novolimiar 99999)
		nil
		(procura-generica (last lf) nil algoritmo operadores heuristica novolimiar)
		)
	)
	)
	(T nil)
	)
)	
((objectivo (estado-tabuleiro (first la))) (devolver (car la) la lf))
((visitado (car la) lf)(procura-generica (cdr la) lf algoritmo operadores heuristica limiar))
(T (procura-generica
    (funcall algoritmo (sucessores (car la) operadores nil heuristica) (cdr la) limiar) (cons (car la) lf) algoritmo operadores heuristica limiar
    )                    
    )
)
)  |#


(defun minimo-sucessores (velhoMinimo novoMinimo lista)
(cond 
((null lista) novoMinimo)
(T (if
(and (< (estado-f (car lista)) novoMinimo) (> (estado-f (car lista)) velhoMinimo))
(minimo-sucessores velhoMinimo (estado-f (car lista)) (cdr lista))
(minimo-sucessores velhoMinimo novoMinimo (cdr lista))
)
)
)
)

(defun ida-star (sucessores restla limiar nosFechados)
  (cond ((null sucessores)restla)
        ((<= (estado-f (car sucessores)) limiar) (append sucessores restla))
        (t (list restla nosFechados))
	)
)


(defun procura-ida-star (la lf operadores heuristica limiar nosFechados)
(cond
((null la)
	(let ((novolimiar(minimo-sucessores limiar 99999 nosFechados)))
		(if (= novolimiar 99999)
		nil
		(procura-ida-star (last lf) nil operadores heuristica novolimiar nosFechados)
		)
	)
)	
((objectivo (estado-tabuleiro (first la))) (devolver (car la) la lf))
((visitado (car la) lf)(procura-ida-star (cdr la) lf operadores heuristica limiar nosFechados))
(T 
(let ((retorno(ida-star (sucessores (car la) operadores nil heuristica) (cdr la) limiar nosFechados)))
	(procura-ida-star
    (car retorno) (cons (car la) lf) operadores heuristica limiar (cadr retorno)
    )
)
)
)
) 


(defun procura-generica (la lf algoritmo operadores heuristica)
(cond
((null la)nil)	
((objectivo (estado-tabuleiro (first la))) (devolver (car la) la lf))
((visitado (car la) lf)(procura-generica (cdr la) lf algoritmo operadores heuristica))
(T (procura-generica
    (funcall algoritmo (sucessores (car la) operadores nil heuristica) (cdr la)) (cons (car la) lf) algoritmo operadores heuristica
    )                    
)
)
) 

(defun visitado (no lf)
(cond
  ((null lf) nil)
  ((equal (estado-tabuleiro no) (estado-tabuleiro (car lf))) T)
  (T (visitado no (cdr lf)))
)
)

(defun profundidade (sucessores restla limiar)
  (append sucessores restla)
)

(defun largura (sucessores restla limiar)
  (append restla sucessores)
)

(defun insere-ordenado (no la)
  (cond ((null la) (list no))
    ((< (estado-f no) (estado-f (car la))) (cons no la))
    (T (cons (car la) (insere-ordenado no (cdr la)))
    )
 ) 
 )

(defun ordenar-sucessores (sucessores) 
(cond ((null sucessores) nil)
       (T (insere-ordenado (car sucessores) (ordenar-sucessores (cdr sucessores))))                  
)
)

(defun a-star (sucessores restla limiar)
  (ordenar-sucessores (append sucessores restla))
)

(defun movimentos-solucao (no solucoes)
	(cond
		((null (estado-noPai no)) solucoes)
		(T  (movimentos-solucao (estado-noPai no) (cons (estado-movActual no) solucoes)))
	) 
)

(defun devolver (no la lf)
  (progn
    (print (movimentos-solucao no nil))
    (print (penetrancia la lf no))
    (print (nos-gerados la lf))
    (print (nos-expandidos lf))
    (print (profundidade-solucao no))
    (print (factor-ramificacao-medio la lf no))
   )
)